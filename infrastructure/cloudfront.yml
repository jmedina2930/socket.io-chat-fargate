AWSTemplateFormatVersion: '2010-09-09'
Description: A CloudFront distribution that glues the separate
             services together into one website
Parameters:
  EnvironmentName:
    Type: String
    Default: production
    Description: A name for the environment that this cloudformation will be part of.

  CertArn:
    Type: String
    Default: 'no custom domain'
    Description: Optional ARN of an Amazon Certificate Manager cert that is the
                 SSL cert for the application

  DomainName:
    Type: String
    Default: 'no custom domain'
    Description: Optional domain name for the application when deployed.

Conditions:
  CustomHttpsDomainEnabled: !Not [ !Equals [ !Ref DomainName, 'no custom domain']]

Resources:

  # Describes what to cache and for how long
  ChatAppCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: 'chat-app-default'
        DefaultTTL: 0
        MaxTTL: 10
        MinTTL: 0
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingGzip: true
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Sec-WebSocket-Key
              - Sec-WebSocket-Version
              - Sec-WebSocket-Protocol
              - Sec-WebSocket-Accept
              - Sec-WebSocket-Extensions
          QueryStringsConfig:
            QueryStringBehavior: all

  # Describes the different origins and how to map incoming
  # traffic to different origin servers
  ChatAppDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !If [ 'CustomHttpsDomainEnabled', !Ref DomainName, !Ref AWS::NoValue ]
        ViewerCertificate:
          # If no custom domain specified, then use the default cert
          CloudFrontDefaultCertificate: !If [ 'CustomHttpsDomainEnabled', !Ref AWS::NoValue, true]

          # Otherwise use out custom cert from Amazon Certificate Manager
          AcmCertificateArn: !If [ 'CustomHttpsDomainEnabled', !Ref CertArn, !Ref AWS::NoValue ]
          MinimumProtocolVersion: !If [ 'CustomHttpsDomainEnabled', 'TLSv1.2_2021', !Ref AWS::NoValue ]
          SslSupportMethod: !If [ 'CustomHttpsDomainEnabled', 'sni-only', !Ref AWS::NoValue ]
        DefaultRootObject: 'index.html'
        Enabled: true
        Origins:
          - Id: 'web-static'
            DomainName:
              Fn::ImportValue: !Sub "${EnvironmentName}:WebEndpoint"
            CustomOriginConfig:
              OriginProtocolPolicy: 'https-only'
              OriginKeepaliveTimeout: 60
          - Id: 'socket-app'
            DomainName:
              Fn::ImportValue: !Sub "${EnvironmentName}:ExternalDnsName"
            CustomOriginConfig:
              OriginProtocolPolicy: 'http-only'
              OriginKeepaliveTimeout: 60
          - Id: 'search-gateway'
            DomainName:
              !Sub
                - '${ChatMessageSearchValue}.execute-api.${AWS::Region}.amazonaws.com'
                - ChatMessageSearchValue:
                    Fn::ImportValue: !Sub '${EnvironmentName}:ChatMessageSearchId'
            CustomOriginConfig:
              OriginProtocolPolicy: 'https-only'
              OriginKeepaliveTimeout: 60
        # Default behavior sends all static web traffic to the
        # AppRunner hosted endpoint
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          CachePolicyId: !Ref ChatAppCachePolicy
          ViewerProtocolPolicy: redirect-to-https
          TargetOriginId: 'web-static'
          Compress: true
        CacheBehaviors:
          # Search traffic goes to API Gateway of the Lambda function
          - PathPattern: '/search*'
            TargetOriginId: 'search-gateway'
            CachePolicyId: !Ref ChatAppCachePolicy
            ViewerProtocolPolicy: redirect-to-https
            Compress: true
          # Socket.io traffic goes to the Fargate hosted container
          - PathPattern: '/socket.io*'
            TargetOriginId: 'socket-app'
            CachePolicyId: !Ref ChatAppCachePolicy
            ViewerProtocolPolicy: redirect-to-https
            Compress: true

Outputs:
  PublicURL:
    Description: The name of the ECS cluster
    Value: !GetAtt ChatAppDistribution.DomainName
    Export:
      Name: !Sub '${EnvironmentName}:PublicURL'